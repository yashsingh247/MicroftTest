@model TestIndore.Models.OrderViewModel
@using TestIndore.Models
@using TestIndore.Services

@{
    ViewBag.Title = "Order";
    OrderServices OS = new OrderServices();
    List<Customer> customer = OS.GetCustomerDDL();
    List<Product> product = OS.GetProductDDL();
    var productOptions = string.Join("", ((IEnumerable<dynamic>)product).Select(p => $"<option value='{p.ProductID}'>{p.ProductName}</option>"));
}



@using (Html.BeginForm("AddEditOrder", "Order", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
    <div class="row">
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-2">
                    <div class="form-group">
                        <label>Order Date</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.HiddenFor(m => m.Order.OrderID)
                        @Html.TextBoxFor(m => m.Order.OrderDate, new { @Type = "Text", @class = "form-control date", @required = "required" })
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label>Customer</label>

                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @*@Html.TextBoxFor(m => m.Order.CustomerID, new { @Type = "Text", @class = "form-control", @required = "required" })*@
                        @Html.DropDownListFor(m => m.Order.CustomerID, new SelectList(customer, "CustomerID", "CustomerName"), "Select Customer", new { @class = "form-control ddl" })
                    </div>
                </div>

            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-2">
                    <div class="form-group">
                        <label>Total Quantity</label>

                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Order.TotalQty, new { @Type = "Text", @class = "form-control", @required = "required", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="form-group">
                        <label>Total Amount</label>

                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.Order.TotalAmount, new { @Type = "Text", @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Order List</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-responsive dataTable" id="orderDetailsTable" width="100%" cellspacing="0">
                    <thead class="bg-gradient-primary" style="color:white;">
                        <tr>

                            <th style="display:none;">Id</th>
                            <th>Product Code &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                            <th>Product Image &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                            <th>Unit &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                            <th>Rate &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                            <th>QTY.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                            <th>Amount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>

                            <th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null)
                        {
                            if (Model.OrderDetails != null && Model.OrderDetails.Count > 0)
                            {
                                for (int i= 0; i < Model.OrderDetails.Count;i++)
                                {
                                <tr>

                                    <td>
                                        @Html.HiddenFor(m => m.OrderDetails[i].DetailID)
                                        @Html.DisplayFor(m => m.OrderDetails[i].OrderID)
                                    </td>
                                    <td>
                                        @*@Html.TextBoxFor(modelItem => i.ProductCode)*@
                                        @Html.DropDownListFor(m => m.OrderDetails[i].ProductCode, new SelectList(product, "ProductID", "ProductName"), "Select Product", new { @class = "form-control ddl" })
                                    </td>
                                    <td>
                                        @Html.DisplayFor(m => m.OrderDetails[i].ProductImage)

                                    </td>
                                    <td>
                                        @Html.DisplayFor(m => m.OrderDetails[i].Unit)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(m => m.OrderDetails[i].Rate)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(m => m.OrderDetails[i].Qty)
                                    </td>
                                    <td>

                                        @Html.DisplayFor(m => m.OrderDetails[i].Amount)
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger remove-detail-btn">Remove</button>
                                    </td>


                                    <!--<td>-->
                                   
                                </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-primary" id="addDetailBtn">Add New Row </button>
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>

    @*<div class="row">
        <div class="col-md-12 col-lg-12 col-xl-12">
            <div class="form-group" style=" text-align:center">
                <input type="submit" id="Submit" class="btn btn-success" value="Submit" style="margin-top:1%" />
            </div>
        </div>
    </div>*@
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*@section Scripts {*@
    @*<partial name="_  ValidationScriptsPartial" />*@
<script>
    document.addEventListener("DOMContentLoaded", function () {
            const orderDetailsTable = document.getElementById('orderDetailsTable');
            const addDetailBtn = document.getElementById('addDetailBtn');
        const productOptions = `@Html.Raw(productOptions)`;
            addDetailBtn.addEventListener('click', function () {
                const rowCount = orderDetailsTable.rows.length;
                const newRow = orderDetailsTable.insertRow();
                newRow.innerHTML = `
                    <td>
                          <select name="OrderDetails[${rowCount}].ProductCode" class="form-control ddls">
                            ${productOptions}
                        </select>
                    </td>
                    <td>
                        <input name="OrderDetails[${rowCount}].ProductImage" class="form-control" readonly/>
                    </td>
                    <td>
                        <input name="OrderDetails[${rowCount}].Unit" class="form-control" />
                    </td>
                    <td>
                        <input name="OrderDetails[${rowCount}].Rate" class="form-control rate" data-row-index="${rowCount}" />
                    </td>
                    <td>
                        <input name="OrderDetails[${rowCount}].Qty"  class="form-control qty" data-row-index="${rowCount}" />
                    </td>
                    <td>
                        <input name="OrderDetails[${rowCount}].Amount" class="form-control amount" readonly />
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger remove-detail-btn">Remove</button>
                    </td>
                `;

                addRemoveFunctionality(newRow.querySelector('.remove-detail-btn'));
                addCalculationFunctionality(newRow.querySelector('.rate'), newRow.querySelector('.qty'));
            });

            function addRemoveFunctionality(button) {
                button.addEventListener('click', function () {
                    const row = button.closest('tr');
                    row.remove();
                });
            }

        function addCalculationFunctionality(rateInput, qtyInput) {
            const rowIndex = rateInput.dataset.rowIndex;

            rateInput.addEventListener('input', function () {
                calculateAmount(rowIndex);
            });

            qtyInput.addEventListener('input', function () {
                calculateAmount(rowIndex);
            });
        }

        function calculateAmount(rowIndex) {
            const rateInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Rate"]`);
            const qtyInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Qty"]`);
            const amountInput = document.querySelector(`input[name="OrderDetails[${rowIndex}].Amount"]`);

            const rate = parseFloat(rateInput.value) || 0;
            const qty = parseFloat(qtyInput.value) || 0;
            const amount = rate * qty;

            amountInput.value = amount.toFixed(2);
        }

        document.querySelectorAll('.remove-detail-btn').forEach(addRemoveFunctionality);
        document.querySelectorAll('.rate').forEach(rateInput => {
            const qtyInput = document.querySelector(`input[name="OrderDetails[${rateInput.dataset.rowIndex}].Qty"]`);
            addCalculationFunctionality(rateInput, qtyInput);
        });
        document.querySelectorAll('.qty').forEach(qtyInput => {
            const rateInput = document.querySelector(`input[name="OrderDetails[${qtyInput.dataset.rowIndex}].Rate"]`);
            addCalculationFunctionality(rateInput, qtyInput);
        });
    });


</script>
@*}*@
